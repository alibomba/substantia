// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PasswordResetToken {
  id       String   @id @default(uuid())
  token    String   @unique
  issuedAt DateTime @default(now())
}

model RefreshToken {
  id       String   @id @default(uuid())
  token    String   @unique
  issuedAt DateTime @default(now())
}

model User {
  id                  String           @id @default(uuid())
  email               String           @unique @db.VarChar(20)
  username            String           @db.VarChar(20)
  slug                String           @unique @db.VarChar(20)
  password            String?
  oAuth               Boolean
  hasChannel          Boolean          @default(false)
  stripeChannelPlanID String?          @unique
  stripeCustomerID    String?          @unique
  subscriptionPrice   Int?
  avatar              String?
  banner              String?
  profileVideo        String?
  facebook            String?
  instagram           String?
  twitter             String?
  description         String?
  bookmarks           Bookmark[]
  postLikes           PostLike[]
  postComments        PostComment[]
  commentLikes        CommentLike[]
  commentReplies      CommentReply[]
  replyLikes          ReplyLike[]
  pollVotes           PostPollOption[]
  posts               Post[]
  createdAt           DateTime         @default(now())
}

model Post {
  id        String        @id @default(uuid())
  content   String
  videoPath String?
  likes     PostLike[]
  comments  PostComment[]
  bookmarks Bookmark[]
  images    PostImage[]
  poll      PostPoll?
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
}

model PostImage {
  id        String   @id @default(uuid())
  path      String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model PostPoll {
  id        String           @id @default(uuid())
  postId    String           @unique
  post      Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  options   PostPollOption[]
  createdAt DateTime         @default(now())
}

model PostPollOption {
  id     String   @id @default(uuid())
  label  String   @db.VarChar(20)
  votes  User[]
  pollId String
  poll   PostPoll @relation(fields: [pollId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model PostLike {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model PostComment {
  id        String         @id @default(uuid())
  content   String
  likes     CommentLike[]
  replies   CommentReply[]
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
}

model CommentLike {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  commentId String
  comment   PostComment @relation(fields: [commentId], references: [id])
  createdAt DateTime    @default(now())
}

model CommentReply {
  id        String      @id @default(uuid())
  content   String
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comment   PostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  likes     ReplyLike[]
  createdAt DateTime    @default(now())
}

model ReplyLike {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  replyId   String
  reply     CommentReply @relation(fields: [replyId], references: [id])
  createdAt DateTime     @default(now())
}
